/* - observe that the flatten list can be generated by preorder traversal of the tree
 */
#include <iostream>

using namespace std;

class TreeNode {
public:
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) { }
};

class Solution {
public:
    void flatten(TreeNode* root) {
        if (root == NULL) return;
        preorder(root);
        TreeNode *itr1 = root, *itr2 = root;
        while (itr1 != NULL) {
            itr2 -> right = itr1 -> left;
            itr1 = itr1 -> left;
            itr2 -> left = NULL;
            itr2 = itr2 -> right;
        }
    }
    void preorder(TreeNode* root) {
        if (root == NULL) return;
        else itr = root;
        preorder(root -> left);
        if (root -> right != NULL)
            itr -> left = root -> right;
        preorder(root -> right);
    }
private:
    TreeNode *itr;
};

int main() {
    TreeNode *root = new TreeNode(1);
    root -> right = new TreeNode(2);
    root -> right -> right = new TreeNode(3);
    Solution solution;
    solution.flatten(root);
    cout << root -> val << " " << root -> right -> val
         << " " << root -> right -> right -> val << endl;
    return 0;
}
